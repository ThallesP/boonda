/**
 * Generated by orval v7.4.1 üç∫
 * Do not edit manually.
 * Boonda API
 * Uploads made easier
 * OpenAPI spec version: 1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
	DataTag,
	DefinedInitialDataOptions,
	DefinedUseQueryResult,
	QueryFunction,
	QueryKey,
	UndefinedInitialDataOptions,
	UseQueryOptions,
	UseQueryResult,
} from "@tanstack/react-query";
export interface GetMeResponse {
	/** The message of the response */
	message: string;
}

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export type getMeControllerGetMeResponse = {
	data: GetMeResponse;
	status: number;
	headers: Headers;
};

export const getGetMeControllerGetMeUrl = () => {
	return `http://localhost:3000/me`;
};

export const getMeControllerGetMe = async (
	options?: RequestInit,
): Promise<getMeControllerGetMeResponse> => {
	const res = await fetch(getGetMeControllerGetMeUrl(), {
		...options,
		method: "GET",
	});

	const data: GetMeResponse =
		[204, 205, 304].includes(res.status) || !res.body ? {} : await res.json();

	return { status: res.status, data, headers: res.headers };
};

export const getGetMeControllerGetMeQueryKey = () => {
	return [`http://localhost:3000/me`] as const;
};

export const getGetMeControllerGetMeQueryOptions = <
	TData = Awaited<ReturnType<typeof getMeControllerGetMe>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getMeControllerGetMe>>,
			TError,
			TData
		>
	>;
	fetch?: RequestInit;
}) => {
	const { query: queryOptions, fetch: fetchOptions } = options ?? {};

	const queryKey = queryOptions?.queryKey ?? getGetMeControllerGetMeQueryKey();

	const queryFn: QueryFunction<
		Awaited<ReturnType<typeof getMeControllerGetMe>>
	> = ({ signal }) => getMeControllerGetMe({ signal, ...fetchOptions });

	return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
		Awaited<ReturnType<typeof getMeControllerGetMe>>,
		TError,
		TData
	> & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMeControllerGetMeQueryResult = NonNullable<
	Awaited<ReturnType<typeof getMeControllerGetMe>>
>;
export type GetMeControllerGetMeQueryError = unknown;

export function useGetMeControllerGetMe<
	TData = Awaited<ReturnType<typeof getMeControllerGetMe>>,
	TError = unknown,
>(options: {
	query: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getMeControllerGetMe>>,
			TError,
			TData
		>
	> &
		Pick<
			DefinedInitialDataOptions<
				Awaited<ReturnType<typeof getMeControllerGetMe>>,
				TError,
				TData
			>,
			"initialData"
		>;
	fetch?: RequestInit;
}): DefinedUseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMeControllerGetMe<
	TData = Awaited<ReturnType<typeof getMeControllerGetMe>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getMeControllerGetMe>>,
			TError,
			TData
		>
	> &
		Pick<
			UndefinedInitialDataOptions<
				Awaited<ReturnType<typeof getMeControllerGetMe>>,
				TError,
				TData
			>,
			"initialData"
		>;
	fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMeControllerGetMe<
	TData = Awaited<ReturnType<typeof getMeControllerGetMe>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getMeControllerGetMe>>,
			TError,
			TData
		>
	>;
	fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetMeControllerGetMe<
	TData = Awaited<ReturnType<typeof getMeControllerGetMe>>,
	TError = unknown,
>(options?: {
	query?: Partial<
		UseQueryOptions<
			Awaited<ReturnType<typeof getMeControllerGetMe>>,
			TError,
			TData
		>
	>;
	fetch?: RequestInit;
}): UseQueryResult<TData, TError> & {
	queryKey: DataTag<QueryKey, TData, TError>;
} {
	const queryOptions = getGetMeControllerGetMeQueryOptions(options);

	const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
		queryKey: DataTag<QueryKey, TData, TError>;
	};

	query.queryKey = queryOptions.queryKey;

	return query;
}
